// Package models contains the types for schema 'public'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
)

// Game represents a row from 'public.games'.
type Game struct {
	ID        int            `json:"id"`         // id
	Title     string         `json:"title"`      // title
	Developer sql.NullString `json:"developer"`  // developer
	Summary   sql.NullString `json:"summary"`    // summary
	Rating    string         `json:"rating"`     // rating
	ImageName sql.NullString `json:"image_name"` // image_name
	Video     sql.NullString `json:"video"`      // video
	VideoType sql.NullString `json:"video_type"` // video_type

}

type GameService interface {
	DoesGameExists(g *Game) (bool, error)
	InsertGame(g *Game) error
	UpdateGame(g *Game) error
	UpsertGame(g *Game) error
	DeleteGame(g *Game) error
	GetAllGames() ([]*Game, error)
	GetChunkedGames(limit int, offset int) ([]*Game, error)
}

type GameServiceImpl struct {
	DB XODB
}

// Exists determines if the Game exists in the database.
func (serviceImpl *GameServiceImpl) DoesGameExists(g *Game) (bool, error) {
	panic("not yet implemented")
}

// Insert inserts the Game to the database.
func (serviceImpl *GameServiceImpl) InsertGame(g *Game) error {
	var err error

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO public.games (` +
		`title, developer, summary, rating, image_name, video, video_type` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7` +
		`) RETURNING id`

	// run query
	XOLog(sqlstr, g.Title, g.Developer, g.Summary, g.Rating, g.ImageName, g.Video, g.VideoType)
	err = serviceImpl.DB.QueryRow(sqlstr, g.Title, g.Developer, g.Summary, g.Rating, g.ImageName, g.Video, g.VideoType).Scan(&g.ID)
	if err != nil {
		return err
	}

	return nil
}

// Update updates the Game in the database.
func (serviceImpl *GameServiceImpl) UpdateGame(g *Game) error {
	var err error

	// sql query
	const sqlstr = `UPDATE public.games SET (` +
		`title, developer, summary, rating, image_name, video, video_type` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7` +
		`) WHERE id = $8`

	// run query
	XOLog(sqlstr, g.Title, g.Developer, g.Summary, g.Rating, g.ImageName, g.Video, g.VideoType, g.ID)
	_, err = serviceImpl.DB.Exec(sqlstr, g.Title, g.Developer, g.Summary, g.Rating, g.ImageName, g.Video, g.VideoType, g.ID)
	return err
}

// Save saves the Game to the database.
/*
	func (g *Game) Save(db XODB) error {
		if g.Exists() {
			return g.Update(db)
		}

		return g.Insert(db)
	}
*/

// Upsert performs an upsert for Game.
//
// NOTE: PostgreSQL 9.5+ only
func (serviceImpl *GameServiceImpl) UpsertGame(g *Game) error {
	var err error

	// sql query
	const sqlstr = `INSERT INTO public.games (` +
		`id, title, developer, summary, rating, image_name, video, video_type` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, title, developer, summary, rating, image_name, video, video_type` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.title, EXCLUDED.developer, EXCLUDED.summary, EXCLUDED.rating, EXCLUDED.image_name, EXCLUDED.video, EXCLUDED.video_type` +
		`)`

	// run query
	XOLog(sqlstr, g.ID, g.Title, g.Developer, g.Summary, g.Rating, g.ImageName, g.Video, g.VideoType)
	_, err = serviceImpl.DB.Exec(sqlstr, g.ID, g.Title, g.Developer, g.Summary, g.Rating, g.ImageName, g.Video, g.VideoType)
	if err != nil {
		return err
	}

	return nil
}

// Delete deletes the Game from the database.
func (serviceImpl *GameServiceImpl) DeleteGame(g *Game) error {
	var err error

	// sql query
	const sqlstr = `DELETE FROM public.games WHERE id = $1`

	// run query
	XOLog(sqlstr, g.ID)
	_, err = serviceImpl.DB.Exec(sqlstr, g.ID)
	if err != nil {
		return err
	}

	return nil
}

// GetAllGames returns all rows from 'public.games',
// ordered by "created_at" in descending order.
func (serviceImpl *GameServiceImpl) GetAllGames() ([]*Game, error) {
	const sqlstr = `SELECT ` +
		`*` +
		`FROM public.games`

	q, err := serviceImpl.DB.Query(sqlstr)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	var res []*Game
	for q.Next() {
		g := Game{}

		// scan
		err = q.Scan(&g.ID, &g.Title, &g.Developer, &g.Summary, &g.Rating, &g.ImageName, &g.Video, &g.VideoType)
		if err != nil {
			return nil, err
		}

		res = append(res, &g)
	}

	return res, nil
}

// GetChunkedGames returns pagingated rows from 'public.games',
// ordered by "created_at" in descending order.
func (serviceImpl *GameServiceImpl) GetChunkedGames(limit int, offset int) ([]*Game, error) {
	const sqlstr = `SELECT ` +
		`*` +
		`FROM public.games LIMIT $1 OFFSET $2`

	q, err := serviceImpl.DB.Query(sqlstr, limit, offset)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	var res []*Game
	for q.Next() {
		g := Game{}

		// scan
		err = q.Scan(&g.ID, &g.Title, &g.Developer, &g.Summary, &g.Rating, &g.ImageName, &g.Video, &g.VideoType)
		if err != nil {
			return nil, err
		}

		res = append(res, &g)
	}

	return res, nil
}

// GameByID retrieves a row from 'public.games' as a Game.
//
// Generated from index 'games_pkey'.
func (serviceImpl *GameServiceImpl) GameByID(_, id int) (*Game, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, title, developer, summary, rating, image_name, video, video_type ` +
		`FROM public.games ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)

	g := Game{}

	err = serviceImpl.DB.QueryRow(sqlstr, id).Scan(&g.ID, &g.Title, &g.Developer, &g.Summary, &g.Rating, &g.ImageName, &g.Video, &g.VideoType)
	if err != nil {
		return nil, err
	}

	return &g, nil
}
