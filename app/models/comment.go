// Package models contains the types for schema 'public'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
)

// Comment represents a row from 'public.comment'.
type Comment struct {
	ID      int           `json:"id"`      // id
	Game    sql.NullInt64 `json:"game"`    // game
	Comment string        `json:"comment"` // comment
	Rating  int           `json:"rating"`  // rating

}

type CommentService interface {
	DoesCommentExists(c *Comment) (bool, error)
	InsertComment(c *Comment) error
	UpdateComment(c *Comment) error
	UpsertComment(c *Comment) error
	DeleteComment(c *Comment) error
	GetAllComments() ([]*Comment, error)
	GetChunkedComments(limit int, offset int) ([]*Comment, error)
}

type CommentServiceImpl struct {
	DB XODB
}

// Exists determines if the Comment exists in the database.
func (serviceImpl *CommentServiceImpl) DoesCommentExists(c *Comment) (bool, error) {
	panic("not yet implemented")
}

// Insert inserts the Comment to the database.
func (serviceImpl *CommentServiceImpl) InsertComment(c *Comment) error {
	var err error

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO public.comment (` +
		`game, comment, rating` +
		`) VALUES (` +
		`$1, $2, $3` +
		`) RETURNING id`

	// run query
	XOLog(sqlstr, c.Game, c.Comment, c.Rating)
	err = serviceImpl.DB.QueryRow(sqlstr, c.Game, c.Comment, c.Rating).Scan(&c.ID)
	if err != nil {
		return err
	}

	return nil
}

// Update updates the Comment in the database.
func (serviceImpl *CommentServiceImpl) UpdateComment(c *Comment) error {
	var err error

	// sql query
	const sqlstr = `UPDATE public.comment SET (` +
		`game, comment, rating` +
		`) = ( ` +
		`$1, $2, $3` +
		`) WHERE id = $4`

	// run query
	XOLog(sqlstr, c.Game, c.Comment, c.Rating, c.ID)
	_, err = serviceImpl.DB.Exec(sqlstr, c.Game, c.Comment, c.Rating, c.ID)
	return err
}

// Save saves the Comment to the database.
/*
	func (c *Comment) Save(db XODB) error {
		if c.Exists() {
			return c.Update(db)
		}

		return c.Insert(db)
	}
*/

// Upsert performs an upsert for Comment.
//
// NOTE: PostgreSQL 9.5+ only
func (serviceImpl *CommentServiceImpl) UpsertComment(c *Comment) error {
	var err error

	// sql query
	const sqlstr = `INSERT INTO public.comment (` +
		`id, game, comment, rating` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, game, comment, rating` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.game, EXCLUDED.comment, EXCLUDED.rating` +
		`)`

	// run query
	XOLog(sqlstr, c.ID, c.Game, c.Comment, c.Rating)
	_, err = serviceImpl.DB.Exec(sqlstr, c.ID, c.Game, c.Comment, c.Rating)
	if err != nil {
		return err
	}

	return nil
}

// Delete deletes the Comment from the database.
func (serviceImpl *CommentServiceImpl) DeleteComment(c *Comment) error {
	var err error

	// sql query
	const sqlstr = `DELETE FROM public.comment WHERE id = $1`

	// run query
	XOLog(sqlstr, c.ID)
	_, err = serviceImpl.DB.Exec(sqlstr, c.ID)
	if err != nil {
		return err
	}

	return nil
}

// GetAllComments returns all rows from 'public.comment',
// ordered by "created_at" in descending order.
func (serviceImpl *CommentServiceImpl) GetAllComments() ([]*Comment, error) {
	const sqlstr = `SELECT ` +
		`*` +
		`FROM public.comment`

	q, err := serviceImpl.DB.Query(sqlstr)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	var res []*Comment
	for q.Next() {
		c := Comment{}

		// scan
		err = q.Scan(&c.ID, &c.Game, &c.Comment, &c.Rating)
		if err != nil {
			return nil, err
		}

		res = append(res, &c)
	}

	return res, nil
}

// GetChunkedComments returns pagingated rows from 'public.comment',
// ordered by "created_at" in descending order.
func (serviceImpl *CommentServiceImpl) GetChunkedComments(limit int, offset int) ([]*Comment, error) {
	const sqlstr = `SELECT ` +
		`*` +
		`FROM public.comment LIMIT $1 OFFSET $2`

	q, err := serviceImpl.DB.Query(sqlstr, limit, offset)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	var res []*Comment
	for q.Next() {
		c := Comment{}

		// scan
		err = q.Scan(&c.ID, &c.Game, &c.Comment, &c.Rating)
		if err != nil {
			return nil, err
		}

		res = append(res, &c)
	}

	return res, nil
}

// Game returns the Game associated with the Comment's Game (game).
//
// Generated from foreign key 'comment_game_fkey'.
func (c *Comment) GetGames(db XODB) (*Game, error) {
	service := GameServiceImpl{
		DB: db,
	}
	return service.GameByID(int(c.Game.Int64), int(c.Game.Int64))
}

// CommentByID retrieves a row from 'public.comment' as a Comment.
//
// Generated from index 'comment_pkey'.
func (serviceImpl *CommentServiceImpl) CommentByID(_, id int) (*Comment, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, game, comment, rating ` +
		`FROM public.comment ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)

	c := Comment{}

	err = serviceImpl.DB.QueryRow(sqlstr, id).Scan(&c.ID, &c.Game, &c.Comment, &c.Rating)
	if err != nil {
		return nil, err
	}

	return &c, nil
}
