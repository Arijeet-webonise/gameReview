// Package models contains the types for schema 'public'.
package models

// Code generated by xo. DO NOT EDIT.

// Session represents a row from 'public.session'.
type Session struct {
	UUID   string `json:"uuid"`   // uuid
	Userid int    `json:"userid"` // userid

}

type SessionService interface {
	DoesSessionExists(s *Session) (bool, error)
	InsertSession(s *Session) error
	UpdateSession(s *Session) error
	UpsertSession(s *Session) error
	DeleteSession(s *Session) error
	GetAllSessions() ([]*Session, error)
	GetChunkedSessions(limit int, offset int) ([]*Session, error)
}

type SessionServiceImpl struct {
	DB XODB
}

// Exists determines if the Session exists in the database.
func (serviceImpl *SessionServiceImpl) DoesSessionExists(s *Session) (bool, error) {
	panic("not yet implemented")
}

// Insert inserts the Session to the database.
func (serviceImpl *SessionServiceImpl) InsertSession(s *Session) error {
	var err error

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO public.session (` +
		`uuid, userid` +
		`) VALUES (` +
		`$1, $2` +
		`)`

	// run query
	XOLog(sqlstr, s.UUID, s.Userid)
	err = serviceImpl.DB.QueryRow(sqlstr, s.UUID, s.Userid).Scan(&s.Userid)
	if err != nil {
		return err
	}

	return nil
}

// Update updates the Session in the database.
func (serviceImpl *SessionServiceImpl) UpdateSession(s *Session) error {
	var err error

	// sql query
	const sqlstr = `UPDATE public.session SET (` +
		`uuid` +
		`) = ( ` +
		`$1` +
		`) WHERE userid = $2`

	// run query
	XOLog(sqlstr, s.UUID, s.Userid)
	_, err = serviceImpl.DB.Exec(sqlstr, s.UUID, s.Userid)
	return err
}

// Save saves the Session to the database.
/*
	func (s *Session) Save(db XODB) error {
		if s.Exists() {
			return s.Update(db)
		}

		return s.Insert(db)
	}
*/

// Upsert performs an upsert for Session.
//
// NOTE: PostgreSQL 9.5+ only
func (serviceImpl *SessionServiceImpl) UpsertSession(s *Session) error {
	var err error

	// sql query
	const sqlstr = `INSERT INTO public.session (` +
		`uuid, userid` +
		`) VALUES (` +
		`$1, $2` +
		`) ON CONFLICT (userid) DO UPDATE SET (` +
		`uuid, userid` +
		`) = (` +
		`EXCLUDED.uuid, EXCLUDED.userid` +
		`)`

	// run query
	XOLog(sqlstr, s.UUID, s.Userid)
	_, err = serviceImpl.DB.Exec(sqlstr, s.UUID, s.Userid)
	if err != nil {
		return err
	}

	return nil
}

// Delete deletes the Session from the database.
func (serviceImpl *SessionServiceImpl) DeleteSession(s *Session) error {
	var err error

	// sql query
	const sqlstr = `DELETE FROM public.session WHERE userid = $1`

	// run query
	XOLog(sqlstr, s.Userid)
	_, err = serviceImpl.DB.Exec(sqlstr, s.Userid)
	if err != nil {
		return err
	}

	return nil
}

// GetAllSessions returns all rows from 'public.session',
// ordered by "created_at" in descending order.
func (serviceImpl *SessionServiceImpl) GetAllSessions() ([]*Session, error) {
	const sqlstr = `SELECT ` +
		`*` +
		`FROM public.session`

	q, err := serviceImpl.DB.Query(sqlstr)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	var res []*Session
	for q.Next() {
		s := Session{}

		// scan
		err = q.Scan(&s.UUID, &s.Userid)
		if err != nil {
			return nil, err
		}

		res = append(res, &s)
	}

	return res, nil
}

// GetChunkedSessions returns pagingated rows from 'public.session',
// ordered by "created_at" in descending order.
func (serviceImpl *SessionServiceImpl) GetChunkedSessions(limit int, offset int) ([]*Session, error) {
	const sqlstr = `SELECT ` +
		`*` +
		`FROM public.session LIMIT $1 OFFSET $2`

	q, err := serviceImpl.DB.Query(sqlstr, limit, offset)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	var res []*Session
	for q.Next() {
		s := Session{}

		// scan
		err = q.Scan(&s.UUID, &s.Userid)
		if err != nil {
			return nil, err
		}

		res = append(res, &s)
	}

	return res, nil
}

// User returns the User associated with the Session's Userid (userid).
//
// Generated from foreign key 'session_userid_fkey'.
func (s *Session) GetUsers(db XODB) (*User, error) {
	service := UserServiceImpl{
		DB: db,
	}
	return service.UserByID(s.Userid, s.Userid)
}

// SessionByUserid retrieves a row from 'public.session' as a Session.
//
// Generated from index 'session_pkey'.
func (serviceImpl *SessionServiceImpl) SessionByUserid(_, userid int) (*Session, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`uuid, userid ` +
		`FROM public.session ` +
		`WHERE userid = $1`

	// run query
	XOLog(sqlstr, userid)

	s := Session{}

	err = serviceImpl.DB.QueryRow(sqlstr, userid).Scan(&s.UUID, &s.Userid)
	if err != nil {
		return nil, err
	}

	return &s, nil
}

// SessionByUUID retrieves a row from 'public.session' as a Session.
//
// Generated from index 'session_uuid_key'.
func (serviceImpl *SessionServiceImpl) SessionByUUID(_, uuid string) (*Session, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`uuid, userid ` +
		`FROM public.session ` +
		`WHERE uuid = $1`

	// run query
	XOLog(sqlstr, uuid)

	s := Session{}

	err = serviceImpl.DB.QueryRow(sqlstr, uuid).Scan(&s.UUID, &s.Userid)
	if err != nil {
		return nil, err
	}

	return &s, nil
}
